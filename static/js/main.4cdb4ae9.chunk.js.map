{"version":3,"sources":["Applicant/Applicant.ts","App.tsx","Applicant/ApplicantInput.tsx","Applicant/ApplicantView.tsx","Applicant/ApplicantList.tsx","MultiLinkedList.ts","Applicant/ApplicantStore.ts","index.tsx","Applicant/Applicant.module.css"],"names":["ExamGrade","ShowMode","observer","onAdd","onAddRandom","defaultApplicant","lastName","grades","Excellent","hasCertificate","city","needsHousing","state","useLocalObservable","applicant","className","classNames","styles","editingApplicant","left","type","value","onChange","action","e","target","map","k","Good","Pass","Fail","Number","middle","checked","right","onClick","runInAction","makeApplicant","ApplicantView","onRemove","v","Error","join","list","mapNodes","node","item","key","Node","prevPointers","Map","nextPointers","sublist","this","get","Sublist","predicate","firstNode","lastNode","newNode","set","removedNode","next","prev","func","currentNode","forEachMutNode","arr","forEachNode","n","push","undefined","ObservableSublist","atom","createAtom","reportObserved","reportChanged","ObservableMultiLinkedList","mainList","populateSublist","sublists","add","forEach","s","mNode","remove","clear","l","ApplicantStore","allApplicants","allExamsExcelent","outsideOryol","getMainList","createSublist","a","every","g","toLowerCase","makeObservable","observable","uuid","chance","Chance","getGrade","pickone","last","bool","store","mode","All","id","htmlFor","AllExamsExcellent","HasCertificate","OutsideOryol","NeedsHousing","addRandom","getList","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"8GAMYA,E,iEAAAA,O,eAAAA,I,eAAAA,I,eAAAA,I,0BAAAA,M,WCIPC,E,wCC2FUC,eA1FQ,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,YACvBC,EAAmB,iBAA2B,CAChDC,SAAU,GACVC,OAAQ,CACJP,EAAUQ,UACVR,EAAUQ,UACVR,EAAUQ,WAEdC,gBAAgB,EAChBC,KAAM,GACNC,cAAc,IAEZC,EAAQC,aAAmB,iBAAO,CAAEC,UAAWT,QAQrD,OACI,sBAAKU,UAAWC,IAAWC,IAAOH,UAAWG,IAAOC,kBAApD,UACI,sBAAKH,UAAWE,IAAOE,KAAvB,UACI,+EACA,uBACIC,KAAK,OACLC,MAAOT,EAAME,UAAUR,SACvBgB,SAAUC,aACN,SAAAC,GAAC,OAAKZ,EAAME,UAAUR,SAAWkB,EAAEC,OAAOJ,WAGlD,uBACA,yEAAqB,IACpB,CAAC,EAAG,EAAG,GAAGK,KAAI,SAAAC,GAAC,OACZ,yBAEIL,SAAUC,aAAO,SAAAC,GACbZ,EAAME,UAAUP,OAAOoB,GAAK,CACxB3B,EAAUQ,UACVR,EAAU4B,KACV5B,EAAU6B,KACV7B,EAAU8B,MACZC,OAAOP,EAAEC,OAAOJ,WAR1B,UAWI,wBAAQA,MAAO,EAAf,wDACA,wBAAQA,MAAO,EAAf,kDACA,wBAAQA,MAAO,EAAf,6CACA,wBAAQA,MAAO,EAAf,yCAbKM,MAgBb,uBACA,iIACA,uBACIP,KAAK,OACLC,MAAOT,EAAME,UAAUJ,KACvBY,SAAUC,aACN,SAAAC,GAAC,OAAKZ,EAAME,UAAUJ,KAAOc,EAAEC,OAAOJ,WAG9C,0BAEJ,sBAAKN,UAAWE,IAAOe,OAAvB,UACI,6IACA,uBACIZ,KAAK,WACLa,QAASrB,EAAME,UAAUL,eACzBa,SAAUC,aACN,SAAAC,GAAC,OAAKZ,EAAME,UAAUL,eAAiBe,EAAEC,OAAOQ,aAGxD,uBACA,wJACA,uBACIb,KAAK,WACLa,QAASrB,EAAME,UAAUH,aACzBW,SAAUC,aACN,SAAAC,GAAC,OAAKZ,EAAME,UAAUH,aAAea,EAAEC,OAAOQ,gBAI1D,sBAAKlB,UAAWE,IAAOiB,MAAvB,UACI,wBAAQC,QAAS,kBAAMhC,EApEb,WAClB,IAAMW,EAAuBF,EAAME,UAEnC,OADAsB,aAAY,kBAAOxB,EAAME,UAAYT,OAC9BS,EAiE8BuB,KAA7B,eACA,uBACA,wBAAQF,QAAS,kBAAM/B,KAAvB,wBC5CDkC,EA3CO,SAAC,GAAD,IAAGxB,EAAH,EAAGA,UAAWyB,EAAd,EAAcA,SAAd,OAClB,sBAAKxB,UAAWE,IAAOH,UAAvB,UACI,sBAAKC,UAAWE,IAAOE,KAAvB,UACI,gFAAgBL,EAAUR,YAC1B,uBACA,yEACY,IACPQ,EAAUP,OACNmB,KAAI,SAAAc,GACD,OAAQA,GACJ,KAAKxC,EAAU8B,KACX,MAAO,4BACX,KAAK9B,EAAU6B,KACX,MAAO,kCACX,KAAK7B,EAAU4B,KACX,MAAO,uCACX,KAAK5B,EAAUQ,UACX,MAAO,6CACX,QACI,MAAM,IAAIiC,MAAM,YAG3BC,KAAK,SAEd,uBACA,iIAAyB5B,EAAUJ,QACnC,0BAEJ,sBAAKK,UAAWE,IAAOe,OAAvB,UACI,8IAC0BlB,EAAUL,eAAiB,2BAAS,wBAE9D,uBACA,yJAC2BK,EAAUH,aAAe,eAAO,2BAG/D,qBAAKI,UAAWE,IAAOiB,MAAvB,SACI,wBAAQC,QAAS,kBAAMI,KAAvB,qBCxBGrC,eAXO,SAAC,GAAD,IAAGyC,EAAH,EAAGA,KAAMJ,EAAT,EAASA,SAAT,OAClB,8BACKI,EAAKC,UAAS,SAAAC,GAAI,OACf,cAAC,EAAD,CAEI/B,UAAW+B,EAAKC,KAChBP,SAAU,kBAAMA,EAASM,KAFpBA,EAAKC,KAAKC,a,2DCGzBC,E,WAIF,WAAqBF,GAAU,yBAAVA,OAAS,KAHrBG,aAAe,IAAIC,IAGE,KAFrBC,aAAe,IAAID,I,0CAI5B,SAAOE,GACH,OAAOC,KAAKF,aAAaG,IAAIF,K,oBAEjC,SAAOA,GACH,OAAOC,KAAKJ,aAAaK,IAAIF,O,KAI/BG,E,WAIF,WAAqBC,GAA0B,yBAA1BA,YAAyB,KAHtCC,eAGsC,OAFtCC,cAEsC,E,yCAC9C,WACI,OAAOL,KAAKI,Y,kBAGhB,WACI,OAAOJ,KAAKK,W,iBAGhB,SAAIC,GACKN,KAAKI,UAGCJ,KAAKK,WACZL,KAAKK,SAASP,aAAaS,IAAIP,KAAMM,GACrCA,EAAQV,aAAaW,IAAIP,KAAMA,KAAKK,UACpCL,KAAKK,SAAWC,IALhBN,KAAKI,UAAYE,EACjBN,KAAKK,SAAWC,K,oBAQxB,SAAOE,GACH,IAAMC,EAAOD,EAAYV,aAAaG,IAAID,MACpCU,EAAOF,EAAYZ,aAAaK,IAAID,MAEtCA,KAAKI,YAAcI,IACnBR,KAAKI,UAAYK,GAEjBT,KAAKK,WAAaG,IAClBR,KAAKK,SAAWK,GAGhBA,GACAA,EAAKZ,aAAaS,IAAIP,KAAMS,GAG5BA,GACAA,EAAKb,aAAaW,IAAIP,KAAMU,K,4BAIpC,SAAeC,GAEX,IADA,IAAIC,EAAcZ,KAAKI,UAChBQ,GACHD,EAAKC,GACLA,EAAcA,EAAYd,aAAaG,IAAID,Q,yBAInD,SAAYW,GACRX,KAAKa,eAAeF,K,iBAGxB,SAAaA,GACT,IAAMG,EAAiB,GAEvB,OADAd,KAAKe,aAAY,SAAAC,GAAC,OAAIF,EAAIG,KAAKN,EAAKK,EAAEvB,UAC/BqB,I,sBAGX,SAAkBH,GACd,IAAMG,EAAiB,GAEvB,OADAd,KAAKe,aAAY,SAAAC,GAAC,OAAIF,EAAIG,KAAKN,EAAKK,OAC7BF,I,mBAGX,WACI,IAAMA,EAAkB,GAExB,OADAd,KAAKe,aAAY,SAAAC,GAAC,OAAIF,EAAIG,KAAKD,MACxBF,I,qBAGX,WACI,IAAMA,EAAW,GAEjB,OADAd,KAAKe,aAAY,SAAAC,GAAC,OAAIF,EAAIG,KAAKD,EAAEvB,SAC1BqB,I,mBAGX,WACId,KAAKI,eAAYc,EACjBlB,KAAKK,cAAWa,M,KAIlBC,E,kDAGF,WAAYhB,GAA0B,IAAD,8BACjC,cAAMA,IAHOiB,UAEoB,EAEjC,EAAKA,KAAOC,YAAW,qBAFU,E,yCAKrC,WAEI,OADArB,KAAKoB,KAAKE,iBACH,gE,kBAGX,WAEI,OADAtB,KAAKoB,KAAKE,iBACH,+D,iBAGX,SAAIhB,GACAN,KAAKoB,KAAKG,gBACV,2DAAUjB,K,oBAGd,SAAOE,GACHR,KAAKoB,KAAKG,gBACV,8DAAaf,K,4BAGjB,SAAeG,GACXX,KAAKoB,KAAKE,iBACV,sEAAqBX,K,yBAGzB,SAAYA,GACRX,KAAKoB,KAAKE,iBACV,mEAAkBX,K,iBAGtB,SAAaA,GAET,OADAX,KAAKoB,KAAKE,iBACH,2DAAUX,K,sBAGrB,SAAkBA,GAEd,OADAX,KAAKoB,KAAKE,iBACH,gEAAeX,K,mBAG1B,WAEI,OADAX,KAAKoB,KAAKE,iBACH,gE,qBAGX,WAEI,OADAtB,KAAKoB,KAAKE,iBACH,oE,GAvDoBpB,GA0G7BsB,E,kDACF,aAAe,IAAD,8BACV,gBACKC,SAAW,IAAIN,GAAkB,kBAAM,KAFlC,E,iDAKd,SAAchB,GACV,IAAMJ,EAAU,IAAIoB,EAAqBhB,GAGzC,OAFAH,KAAK0B,gBAAgB3B,GACrBC,KAAK2B,SAASV,KAAKlB,GACZA,M,cApDX,aAAe,yBAHL0B,cAGI,OAFJE,SAAyB,GAG/B3B,KAAKyB,SAAW,IAAIvB,GAAQ,kBAAM,K,+CAGtC,WACI,OAAOF,KAAKyB,W,2BAGhB,SAActB,GACV,IAAMJ,EAAU,IAAIG,EAAQC,GAI5B,OAHAH,KAAK0B,gBAAgB3B,GACrBC,KAAK2B,SAASV,KAAKlB,GAEZA,I,6BAGX,SAA0BA,GACtBC,KAAKyB,SAASZ,gBAAe,SAAArB,GACrBO,EAAQI,UAAUX,EAAKC,OAAOM,EAAQ6B,IAAIpC,Q,iBAItD,SAAIC,GACA,IAAMD,EAAO,IAAIG,EAAKF,GACtBO,KAAKyB,SAASG,IAAIpC,GAClBQ,KAAK2B,SAASE,SAAQ,SAAAC,GACdA,EAAE3B,UAAUV,IAAOqC,EAAEF,IAAIpC,Q,oBAIrC,SAAOA,GACH,IAAMuC,EAAQvC,EACdQ,KAAKyB,SAASO,OAAOD,GACrB/B,KAAK2B,SAASE,SAAQ,SAAAC,GAAC,OAAIA,EAAEE,OAAOD,Q,mBAGxC,WACI/B,KAAKyB,SAASQ,QACdjC,KAAK2B,SAASE,SAAQ,SAAAK,GAAC,OAAIA,EAAED,e,sBCjNhBE,G,aAQjB,aAAe,yBAPE7C,UAOH,OANL8C,mBAMK,OALLC,sBAKK,OAJLjF,oBAIK,OAHLkF,kBAGK,OAFLhF,kBAEK,EACV0C,KAAKV,KAAO,IAAIkC,EAChBxB,KAAKoC,cAAgBpC,KAAKV,KAAKiD,cAC/BvC,KAAKqC,iBAAmBrC,KAAKV,KAAKkD,eAAc,SAAAC,GAAC,OAC7CA,EAAEvF,OAAOwF,OAAM,SAAAC,GAAC,OAAIA,IAAMhG,EAAUQ,gBAGxC6C,KAAK5C,eAAiB4C,KAAKV,KAAKkD,eAAc,SAAAC,GAAC,OAAIA,EAAErF,kBACrD4C,KAAKsC,aAAetC,KAAKV,KAAKkD,eAC1B,SAAAC,GAAC,MAA6B,6BAAzBA,EAAEpF,KAAKuF,iBAEhB5C,KAAK1C,aAAe0C,KAAKV,KAAKkD,eAAc,SAAAC,GAAC,OAAIA,EAAEnF,gBACnDuF,YAAe7C,M,uCAGnB,SAAYvC,GACRuC,KAAKV,KAAKsC,IAAIkB,YAAW,aAAEpD,IAAKqD,eAAWtF,O,uBAG/C,WACI,IAAMuF,EAAS,IAAIC,SACbC,EAAW,kBACbF,EAAOG,QAAQ,CACXxG,EAAU8B,KACV9B,EAAU6B,KACV7B,EAAU4B,KACV5B,EAAUQ,aAGZM,EAA8B,CAChCR,SAAU+F,EAAOI,OACjBlG,OAAQ,CAACgG,IAAYA,IAAYA,KACjC9F,eAAgB4F,EAAOK,OACvBhG,KAAM2F,EAAO3F,OACbC,aAAc0F,EAAOK,OACrB3D,IAAKqD,eAGT/C,KAAK4B,IAAInE,K,mBAGb,WACIuC,KAAKV,KAAK2C,U,oBAGd,SAAezC,GACXQ,KAAKV,KAAK0C,OAAOxC,O,oCA/BpBtB,K,qGAIAA,K,uGAsBAA,K,oGAIAA,K,gFLtDAtB,O,aAAAA,I,yCAAAA,I,mCAAAA,I,+BAAAA,I,gCAAAA,M,KAqGUC,mBA7Ff,WACI,IAAMU,EAAQC,aAAmB,iBAAO,CACpC8F,MAAO,IAAInB,EACXoB,KAAM3G,EAAS4G,QAkBnB,OACI,gCACI,wBAAQ1E,QAASZ,aAAO,kBAAMX,EAAM+F,MAAMrB,WAA1C,2EAGA,uBACA,uBACIwB,GAAG,UACH1F,KAAK,QACLa,QAASrB,EAAMgG,OAAS3G,EAAS4G,IACjCvF,SAAUC,aAAO,SAAAC,GACTA,EAAEC,OAAOQ,UAASrB,EAAMgG,KAAO3G,EAAS4G,UAGpD,uBAAOE,QAAQ,UAAf,gCACA,uBACA,uBACID,GAAG,wBACH1F,KAAK,QACLa,QAASrB,EAAMgG,OAAS3G,EAAS+G,kBACjC1F,SAAUC,aAAO,SAAAC,GACTA,EAAEC,OAAOQ,UACTrB,EAAMgG,KAAO3G,EAAS+G,wBAGlC,uBAAOD,QAAQ,wBAAf,yIAGA,uBACA,uBACID,GAAG,qBACH1F,KAAK,QACLa,QAASrB,EAAMgG,OAAS3G,EAASgH,eACjC3F,SAAUC,aAAO,SAAAC,GACTA,EAAEC,OAAOQ,UAASrB,EAAMgG,KAAO3G,EAASgH,qBAGpD,uBAAOF,QAAQ,qBAAf,+IACA,uBACA,uBACID,GAAG,mBACH1F,KAAK,QACLa,QAASrB,EAAMgG,OAAS3G,EAASiH,aACjC5F,SAAUC,aAAO,SAAAC,GACTA,EAAEC,OAAOQ,UAASrB,EAAMgG,KAAO3G,EAASiH,mBAGpD,uBAAOH,QAAQ,mBAAf,yDACA,uBACA,uBACID,GAAG,mBACH1F,KAAK,QACLa,QAASrB,EAAMgG,OAAS3G,EAASkH,aACjC7F,SAAUC,aAAO,SAAAC,GACTA,EAAEC,OAAOQ,UAASrB,EAAMgG,KAAO3G,EAASkH,mBAGpD,uBAAOJ,QAAQ,mBAAf,2HACA,uBAEA,cAAC,EAAD,CACI5G,MAAO,SAAA2F,GAAC,OAAIlF,EAAM+F,MAAM1B,IAAIa,IAC5B1F,YAAamB,aAAO,kBAAMX,EAAM+F,MAAMS,iBAE1C,cAAC,EAAD,CACI7E,SAAUhB,aAAO,SAAAsB,GAAI,OAAIjC,EAAM+F,MAAMtB,OAAOxC,MAC5CF,KAjFI,WACZ,OAAQ/B,EAAMgG,MACV,KAAK3G,EAAS4G,IACV,OAAOjG,EAAM+F,MAAMlB,cACvB,KAAKxF,EAAS+G,kBACV,OAAOpG,EAAM+F,MAAMjB,iBACvB,KAAKzF,EAASgH,eACV,OAAOrG,EAAM+F,MAAMlG,eACvB,KAAKR,EAASiH,aACV,OAAOtG,EAAM+F,MAAMhB,aACvB,KAAK1F,EAASkH,aACV,OAAOvG,EAAM+F,MAAMhG,cAsEb0G,WMrGtBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U,kBCP5BC,EAAOC,QAAU,CAAC,UAAY,6BAA6B,iBAAmB,oCAAoC,KAAO,wBAAwB,OAAS,0BAA0B,MAAQ,4B","file":"static/js/main.4cdb4ae9.chunk.js","sourcesContent":["// фамилия;\n// оценки по трем вступительным экзаменам;\n// сведения о наличии аттестата с отличием;\n// наименование населенного пункта, в котором проживает абитуриент;\n// сведения о необходимости предоставления общежития.\n\nexport enum ExamGrade {\n    Fail,\n    Pass,\n    Good,\n    Excellent,\n}\n\ntype Applicant = {\n    readonly lastName: string\n    readonly grades: [ExamGrade, ExamGrade, ExamGrade]\n    readonly hasCertificate: boolean\n    readonly city: string\n    readonly needsHousing: boolean\n}\n\nexport default Applicant\n","/* eslint-disable react/jsx-filename-extension */\nimport { action } from 'mobx'\nimport { observer, useLocalObservable } from 'mobx-react'\nimport Applicant from './Applicant/Applicant'\nimport ApplicantInput from './Applicant/ApplicantInput'\nimport ApplicantList from './Applicant/ApplicantList'\nimport ApplicantStore from './Applicant/ApplicantStore'\nimport Keyed from './Keyed'\nimport { ISublist } from './MultiLinkedList'\n\nenum ShowMode {\n    All,\n    AllExamsExcellent,\n    HasCertificate,\n    OutsideOryol,\n    NeedsHousing,\n}\n\nfunction App(): JSX.Element {\n    const state = useLocalObservable(() => ({\n        store: new ApplicantStore(),\n        mode: ShowMode.All,\n    }))\n\n    const getList = (): ISublist<Keyed<Applicant>> => {\n        switch (state.mode) {\n            case ShowMode.All:\n                return state.store.allApplicants\n            case ShowMode.AllExamsExcellent:\n                return state.store.allExamsExcelent\n            case ShowMode.HasCertificate:\n                return state.store.hasCertificate\n            case ShowMode.OutsideOryol:\n                return state.store.outsideOryol\n            case ShowMode.NeedsHousing:\n                return state.store.needsHousing\n        }\n    }\n\n    return (\n        <div>\n            <button onClick={action(() => state.store.clear())}>\n                Удалить все\n            </button>\n            <br />\n            <input\n                id=\"showAll\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.All}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.All\n                })}\n            />\n            <label htmlFor=\"showAll\">Все</label>\n            <br />\n            <input\n                id=\"showAllExamsExcellent\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.AllExamsExcellent}\n                onChange={action(e => {\n                    if (e.target.checked)\n                        state.mode = ShowMode.AllExamsExcellent\n                })}\n            />\n            <label htmlFor=\"showAllExamsExcellent\">\n                Все экзамены на отлично\n            </label>\n            <br />\n            <input\n                id=\"showHasCertificate\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.HasCertificate}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.HasCertificate\n                })}\n            />\n            <label htmlFor=\"showHasCertificate\">Есть аттестат с отличием</label>\n            <br />\n            <input\n                id=\"showOutsideOryol\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.OutsideOryol}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.OutsideOryol\n                })}\n            />\n            <label htmlFor=\"showOutsideOryol\">Вне Орла</label>\n            <br />\n            <input\n                id=\"showNeedsHousing\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.NeedsHousing}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.NeedsHousing\n                })}\n            />\n            <label htmlFor=\"showNeedsHousing\">Требуется общежитие</label>\n            <br />\n\n            <ApplicantInput\n                onAdd={a => state.store.add(a)}\n                onAddRandom={action(() => state.store.addRandom())}\n            />\n            <ApplicantList\n                onRemove={action(node => state.store.remove(node))}\n                list={getList()}\n            />\n        </div>\n    )\n}\n\nexport default observer(App)\n","import { action, runInAction } from 'mobx'\nimport { observer, useLocalObservable } from 'mobx-react-lite'\nimport Applicant, { ExamGrade } from './Applicant'\nimport styles from './Applicant.module.css'\nimport classNames from 'classnames'\nimport { Mutable } from 'type-fest'\ntype Props = {\n    onAdd: (a: Applicant) => void\n    onAddRandom: () => void\n}\n\nconst ApplicantInput = ({ onAdd, onAddRandom }: Props): JSX.Element => {\n    const defaultApplicant = (): Mutable<Applicant> => ({\n        lastName: '',\n        grades: [\n            ExamGrade.Excellent,\n            ExamGrade.Excellent,\n            ExamGrade.Excellent,\n        ] as [ExamGrade, ExamGrade, ExamGrade],\n        hasCertificate: false,\n        city: '',\n        needsHousing: false,\n    })\n    const state = useLocalObservable(() => ({ applicant: defaultApplicant() }))\n\n    const makeApplicant = (): Applicant => {\n        const applicant: Applicant = state.applicant\n        runInAction(() => (state.applicant = defaultApplicant()))\n        return applicant\n    }\n\n    return (\n        <div className={classNames(styles.applicant, styles.editingApplicant)}>\n            <div className={styles.left}>\n                <span>Фамилия:</span>\n                <input\n                    type=\"text\"\n                    value={state.applicant.lastName}\n                    onChange={action(\n                        e => (state.applicant.lastName = e.target.value)\n                    )}\n                />\n                <br />\n                <span>Оценки:</span>{' '}\n                {[0, 1, 2].map(k => (\n                    <select\n                        key={k}\n                        onChange={action(e => {\n                            state.applicant.grades[k] = [\n                                ExamGrade.Excellent,\n                                ExamGrade.Good,\n                                ExamGrade.Pass,\n                                ExamGrade.Fail,\n                            ][Number(e.target.value)]\n                        })}\n                    >\n                        <option value={0}>Отлично</option>\n                        <option value={1}>Хорошо</option>\n                        <option value={2}>Удовл.</option>\n                        <option value={3}>Неуд.</option>\n                    </select>\n                ))}\n                <br />\n                <span>Место жительства: </span>\n                <input\n                    type=\"text\"\n                    value={state.applicant.city}\n                    onChange={action(\n                        e => (state.applicant.city = e.target.value)\n                    )}\n                />\n                <br />\n            </div>\n            <div className={styles.middle}>\n                <span>Аттестат с отличием:</span>\n                <input\n                    type=\"checkbox\"\n                    checked={state.applicant.hasCertificate}\n                    onChange={action(\n                        e => (state.applicant.hasCertificate = e.target.checked)\n                    )}\n                />\n                <br />\n                <span>Необходимо общежитие:</span>\n                <input\n                    type=\"checkbox\"\n                    checked={state.applicant.needsHousing}\n                    onChange={action(\n                        e => (state.applicant.needsHousing = e.target.checked)\n                    )}\n                />\n            </div>\n            <div className={styles.right}>\n                <button onClick={() => onAdd(makeApplicant())}>+</button>\n                <br />\n                <button onClick={() => onAddRandom()}>*</button>\n            </div>\n        </div>\n    )\n}\n\nexport default observer(ApplicantInput)\n","import Applicant, { ExamGrade } from './Applicant'\nimport styles from './Applicant.module.css'\n\ntype Props = {\n    applicant: Applicant\n    onRemove: () => void\n}\n\nconst ApplicantView = ({ applicant, onRemove }: Props): JSX.Element => (\n    <div className={styles.applicant}>\n        <div className={styles.left}>\n            <span>Фамилия: {applicant.lastName}</span>\n            <br />\n            <span>\n                Оценки:{' '}\n                {applicant.grades\n                    .map(v => {\n                        switch (v) {\n                            case ExamGrade.Fail:\n                                return 'Неуд.'\n                            case ExamGrade.Pass:\n                                return 'Удовл.'\n                            case ExamGrade.Good:\n                                return 'Хорошо'\n                            case ExamGrade.Excellent:\n                                return 'Отлично'\n                            default:\n                                throw new Error('what')\n                        }\n                    })\n                    .join(', ')}\n            </span>\n            <br />\n            <span>Место жительства: {applicant.city}</span>\n            <br />\n        </div>\n        <div className={styles.middle}>\n            <span>\n                Аттестат с отличием: {applicant.hasCertificate ? 'Есть' : 'Нет'}\n            </span>\n            <br />\n            <span>\n                Необходимо общежитие: {applicant.needsHousing ? 'Да' : 'Нет'}\n            </span>\n        </div>\n        <div className={styles.right}>\n            <button onClick={() => onRemove()}>x</button>\n        </div>\n    </div>\n)\n\nexport default ApplicantView\n","import Applicant from './Applicant'\nimport { INode, ISublist } from '../MultiLinkedList'\nimport ApplicantView from './ApplicantView'\nimport { observer } from 'mobx-react'\nimport Keyed from '../Keyed'\n\ntype Props = {\n    list: ISublist<Keyed<Applicant>>\n    onRemove: (node: INode<Keyed<Applicant>>) => void\n}\n\nconst ApplicantList = ({ list, onRemove }: Props): JSX.Element => (\n    <div>\n        {list.mapNodes(node => (\n            <ApplicantView\n                key={node.item.key}\n                applicant={node.item}\n                onRemove={() => onRemove(node)}\n            />\n        ))}\n    </div>\n)\nexport default observer(ApplicantList)\n","import { createAtom, IAtom } from 'mobx'\n\ntype Predicate<T> = (item: T) => boolean\n\ninterface INode<T> {\n    readonly item: T\n    nextOf(sublist: ISublist<T>): INode<T> | undefined\n    prevOf(sublist: ISublist<T>): INode<T> | undefined\n}\n\ninterface ISublist<T> {\n    first(): INode<T> | undefined\n    last(): INode<T> | undefined\n    nodes(): INode<T>[]\n    map<TResult>(func: (item: T) => TResult): TResult[]\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[]\n}\n\nclass Node<T> implements INode<T> {\n    readonly prevPointers = new Map<ISublist<T>, Node<T> | undefined>()\n    readonly nextPointers = new Map<ISublist<T>, Node<T> | undefined>()\n\n    constructor(readonly item: T) {}\n\n    nextOf(sublist: ISublist<T>): Node<T> | undefined {\n        return this.nextPointers.get(sublist)\n    }\n    prevOf(sublist: ISublist<T>): Node<T> | undefined {\n        return this.prevPointers.get(sublist)\n    }\n}\n\nclass Sublist<T> implements ISublist<T> {\n    private firstNode?: Node<T>\n    private lastNode?: Node<T>\n\n    constructor(readonly predicate: Predicate<T>) {}\n    first(): Node<T> | undefined {\n        return this.firstNode\n    }\n\n    last(): Node<T> | undefined {\n        return this.lastNode\n    }\n\n    add(newNode: Node<T>): void {\n        if (!this.firstNode) {\n            this.firstNode = newNode\n            this.lastNode = newNode\n        } else if (this.lastNode) {\n            this.lastNode.nextPointers.set(this, newNode)\n            newNode.prevPointers.set(this, this.lastNode)\n            this.lastNode = newNode\n        }\n    }\n\n    remove(removedNode: Node<T>): void {\n        const next = removedNode.nextPointers.get(this)\n        const prev = removedNode.prevPointers.get(this)\n\n        if (this.firstNode === removedNode) {\n            this.firstNode = next\n        }\n        if (this.lastNode === removedNode) {\n            this.lastNode = prev\n        }\n\n        if (prev) {\n            prev.nextPointers.set(this, next)\n        }\n\n        if (next) {\n            next.prevPointers.set(this, prev)\n        }\n    }\n\n    forEachMutNode(func: (node: Node<T>) => void): void {\n        let currentNode = this.firstNode\n        while (currentNode) {\n            func(currentNode)\n            currentNode = currentNode.nextPointers.get(this)\n        }\n    }\n\n    forEachNode(func: (node: INode<T>) => void): void {\n        this.forEachMutNode(func)\n    }\n\n    map<TResult>(func: (item: T) => TResult): TResult[] {\n        const arr: TResult[] = []\n        this.forEachNode(n => arr.push(func(n.item)))\n        return arr\n    }\n\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[] {\n        const arr: TResult[] = []\n        this.forEachNode(n => arr.push(func(n)))\n        return arr\n    }\n\n    nodes(): INode<T>[] {\n        const arr: INode<T>[] = []\n        this.forEachNode(n => arr.push(n))\n        return arr\n    }\n\n    content(): T[] {\n        const arr: T[] = []\n        this.forEachNode(n => arr.push(n.item))\n        return arr\n    }\n\n    clear(): void {\n        this.firstNode = undefined\n        this.lastNode = undefined\n    }\n}\n\nclass ObservableSublist<T> extends Sublist<T> {\n    private readonly atom: IAtom\n\n    constructor(predicate: Predicate<T>) {\n        super(predicate)\n        this.atom = createAtom('ObservableSublist')\n    }\n\n    first(): Node<T> | undefined {\n        this.atom.reportObserved()\n        return super.first()\n    }\n\n    last(): Node<T> | undefined {\n        this.atom.reportObserved()\n        return super.last()\n    }\n\n    add(newNode: Node<T>): void {\n        this.atom.reportChanged()\n        super.add(newNode)\n    }\n\n    remove(removedNode: Node<T>): void {\n        this.atom.reportChanged()\n        super.remove(removedNode)\n    }\n\n    forEachMutNode(func: (node: Node<T>) => void): void {\n        this.atom.reportObserved()\n        super.forEachMutNode(func)\n    }\n\n    forEachNode(func: (node: INode<T>) => void): void {\n        this.atom.reportObserved()\n        super.forEachNode(func)\n    }\n\n    map<TResult>(func: (item: T) => TResult): TResult[] {\n        this.atom.reportObserved()\n        return super.map(func)\n    }\n\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[] {\n        this.atom.reportObserved()\n        return super.mapNodes(func)\n    }\n\n    nodes(): INode<T>[] {\n        this.atom.reportObserved()\n        return super.nodes()\n    }\n\n    content(): T[] {\n        this.atom.reportObserved()\n        return super.content()\n    }\n}\n\n// todo: atoms !!!!\nclass MultiLinkedList<T> {\n    protected mainList: Sublist<T>\n    protected sublists: Sublist<T>[] = []\n\n    constructor() {\n        this.mainList = new Sublist(() => true)\n    }\n\n    getMainList(): ISublist<T> {\n        return this.mainList as ISublist<T>\n    }\n\n    createSublist(predicate: Predicate<T>): ISublist<T> {\n        const sublist = new Sublist(predicate)\n        this.populateSublist(sublist)\n        this.sublists.push(sublist)\n\n        return sublist\n    }\n\n    protected populateSublist(sublist: Sublist<T>): void {\n        this.mainList.forEachMutNode(node => {\n            if (sublist.predicate(node.item)) sublist.add(node)\n        })\n    }\n\n    add(item: T): void {\n        const node = new Node(item)\n        this.mainList.add(node)\n        this.sublists.forEach(s => {\n            if (s.predicate(item)) s.add(node)\n        })\n    }\n\n    remove(node: INode<T>): void {\n        const mNode = node as Node<T>\n        this.mainList.remove(mNode)\n        this.sublists.forEach(s => s.remove(mNode))\n    }\n\n    clear(): void {\n        this.mainList.clear()\n        this.sublists.forEach(l => l.clear())\n    }\n}\n\nclass ObservableMultiLinkedList<T> extends MultiLinkedList<T> {\n    constructor() {\n        super()\n        this.mainList = new ObservableSublist(() => true)\n    }\n\n    createSublist(predicate: Predicate<T>): ISublist<T> {\n        const sublist = new ObservableSublist<T>(predicate)\n        this.populateSublist(sublist)\n        this.sublists.push(sublist)\n        return sublist\n    }\n}\n\nexport { MultiLinkedList, ObservableMultiLinkedList }\nexport type { ISublist, INode }\n","import { INode, ISublist, ObservableMultiLinkedList } from '../MultiLinkedList'\nimport Applicant, { ExamGrade } from './Applicant'\nimport { action, makeObservable, observable } from 'mobx'\nimport { Chance } from 'chance'\nimport { v4 as uuid } from 'uuid'\nimport Keyed from '../Keyed'\n\n// все экзамены сданы на «отлично»;\n// имеется аттестат с отличием;\n// проживает за пределами населенного пункта, в котором расположен университет;\n// нуждается в общежитии;\nexport default class ApplicantStore {\n    private readonly list: ObservableMultiLinkedList<Keyed<Applicant>>\n    readonly allApplicants: ISublist<Keyed<Applicant>>\n    readonly allExamsExcelent: ISublist<Keyed<Applicant>>\n    readonly hasCertificate: ISublist<Keyed<Applicant>>\n    readonly outsideOryol: ISublist<Keyed<Applicant>>\n    readonly needsHousing: ISublist<Keyed<Applicant>>\n\n    constructor() {\n        this.list = new ObservableMultiLinkedList()\n        this.allApplicants = this.list.getMainList()\n        this.allExamsExcelent = this.list.createSublist(a =>\n            a.grades.every(g => g === ExamGrade.Excellent)\n        )\n\n        this.hasCertificate = this.list.createSublist(a => a.hasCertificate)\n        this.outsideOryol = this.list.createSublist(\n            a => a.city.toLowerCase() !== 'орёл'\n        )\n        this.needsHousing = this.list.createSublist(a => a.needsHousing)\n        makeObservable(this)\n    }\n\n    @action add(applicant: Applicant): void {\n        this.list.add(observable({ key: uuid(), ...applicant }))\n    }\n\n    @action addRandom(): void {\n        const chance = new Chance()\n        const getGrade = (): ExamGrade =>\n            chance.pickone([\n                ExamGrade.Fail,\n                ExamGrade.Pass,\n                ExamGrade.Good,\n                ExamGrade.Excellent,\n            ])\n\n        const applicant: Keyed<Applicant> = {\n            lastName: chance.last(),\n            grades: [getGrade(), getGrade(), getGrade()],\n            hasCertificate: chance.bool(),\n            city: chance.city(),\n            needsHousing: chance.bool(),\n            key: uuid(),\n        }\n\n        this.add(applicant)\n    }\n\n    @action clear(): void {\n        this.list.clear()\n    }\n\n    @action remove(node: INode<Keyed<Applicant>>): void {\n        this.list.remove(node)\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"applicant\":\"Applicant_applicant__kjt9b\",\"editingApplicant\":\"Applicant_editingApplicant__12iqU\",\"left\":\"Applicant_left__3VxZJ\",\"middle\":\"Applicant_middle__2RjE7\",\"right\":\"Applicant_right__FNGZO\"};"],"sourceRoot":""}