{"version":3,"sources":["Applicant/Applicant.module.css","App.tsx","Applicant/ApplicantInput.tsx","Applicant/ApplicantView.tsx","Applicant/ApplicantList.tsx","MultiLinkedList.ts","Applicant/ApplicantStore.ts","index.tsx"],"names":["module","exports","ShowMode","observer","onAdd","onAddRandom","initialValues","lastName","grades","hasCertificate","city","needsHousing","onSubmit","className","clsx","styles","applicant","editingApplicant","name","type","min","max","onClick","ApplicantView","onRemove","join","list","mapNodes","node","item","key","Node","prevPointers","Map","nextPointers","sublist","this","get","Sublist","predicate","firstNode","lastNode","newNode","set","removedNode","next","prev","func","currentNode","forEachMutNode","arr","forEachNode","n","push","undefined","ObservableSublist","atom","createAtom","reportObserved","reportChanged","ObservableMultiLinkedList","mainList","populateSublist","sublists","add","forEach","s","mNode","remove","clear","l","ApplicantStore","allApplicants","allExamsExcelent","outsideOryol","getMainList","createSublist","a","every","g","toLowerCase","makeObservable","observable","uuid","chance","Chance","getGrade","pickone","last","bool","action","state","useLocalObservable","store","mode","All","id","checked","onChange","e","target","htmlFor","AllExamsExcellent","HasCertificate","OutsideOryol","NeedsHousing","addRandom","getList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d23015f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"applicant\":\"Applicant_applicant__kjt9b\",\"editingApplicant\":\"Applicant_editingApplicant__12iqU\"};","/* eslint-disable react/jsx-filename-extension */\nimport { action } from 'mobx'\nimport { observer, useLocalObservable } from 'mobx-react'\nimport Applicant from './Applicant/Applicant'\nimport ApplicantInput from './Applicant/ApplicantInput'\nimport ApplicantList from './Applicant/ApplicantList'\nimport ApplicantStore from './Applicant/ApplicantStore'\nimport Keyed from './Keyed'\nimport { ISublist } from './MultiLinkedList'\n\nenum ShowMode {\n    All,\n    AllExamsExcellent,\n    HasCertificate,\n    OutsideOryol,\n    NeedsHousing,\n}\n\nfunction App(): JSX.Element {\n    const state = useLocalObservable(() => ({\n        store: new ApplicantStore(),\n        mode: ShowMode.All,\n    }))\n\n    const getList = (): ISublist<Keyed<Applicant>> => {\n        switch (state.mode) {\n            case ShowMode.All:\n                return state.store.allApplicants\n            case ShowMode.AllExamsExcellent:\n                return state.store.allExamsExcelent\n            case ShowMode.HasCertificate:\n                return state.store.hasCertificate\n            case ShowMode.OutsideOryol:\n                return state.store.outsideOryol\n            case ShowMode.NeedsHousing:\n                return state.store.needsHousing\n        }\n    }\n\n    return (\n        <div>\n            <button onClick={action(() => state.store.clear())}>Удалить все</button>\n            <br />\n            <input\n                id=\"showAll\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.All}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.All\n                })}\n            />\n            <label htmlFor=\"showAll\">Все</label>\n            <br />\n            <input\n                id=\"showAllExamsExcellent\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.AllExamsExcellent}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.AllExamsExcellent\n                })}\n            />\n            <label htmlFor=\"showAllExamsExcellent\">Все экзамены на отлично</label>\n            <br />\n            <input\n                id=\"showHasCertificate\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.HasCertificate}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.HasCertificate\n                })}\n            />\n            <label htmlFor=\"showHasCertificate\">Есть аттестат с отличием</label>\n            <br />\n            <input\n                id=\"showOutsideOryol\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.OutsideOryol}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.OutsideOryol\n                })}\n            />\n            <label htmlFor=\"showOutsideOryol\">Вне Орла</label>\n            <br />\n            <input\n                id=\"showNeedsHousing\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.NeedsHousing}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.NeedsHousing\n                })}\n            />\n            <label htmlFor=\"showNeedsHousing\">Требуется общежитие</label>\n            <br />\n\n            <ApplicantInput\n                onAdd={a => state.store.add(a)}\n                onAddRandom={action(() => state.store.addRandom())}\n            />\n            <ApplicantList onRemove={action(node => state.store.remove(node))} list={getList()} />\n        </div>\n    )\n}\n\nexport default observer(App)\n","import { observer } from 'mobx-react-lite'\nimport Applicant from './Applicant'\nimport styles from './Applicant.module.css'\nimport { Mutable } from 'type-fest'\nimport { Field, Form, Formik } from 'formik'\nimport clsx from 'clsx'\ntype Props = {\n    onAdd: (a: Applicant) => void\n    onAddRandom: () => void\n}\n\nconst ApplicantInput = ({ onAdd, onAddRandom }: Props): JSX.Element => {\n    const defaultApplicant = (): Mutable<Applicant> => ({\n        lastName: '',\n        grades: [5, 5, 5],\n        hasCertificate: false,\n        city: '',\n        needsHousing: false,\n    })\n\n    return (\n        <Formik initialValues={defaultApplicant()} onSubmit={onAdd}>\n            <Form>\n                <div className={clsx(styles.applicant, styles.editingApplicant)}>\n                    <div>\n                        <label>\n                            Фамилия: <Field name=\"lastName\" />\n                        </label>\n                        <label>\n                            Оценки:\n                            <Field type=\"number\" name=\"grades[0]\" min={2} max={5} />\n                            <Field type=\"number\" name=\"grades[1]\" min={2} max={5} />\n                            <Field type=\"number\" name=\"grades[2]\" min={2} max={5} />\n                        </label>\n                        <label>\n                            Место жительства: <Field name=\"city\" />\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            Аттестат с отличием: <Field type=\"checkbox\" name=\"hasCertificate\" />\n                        </label>\n                        <label>\n                            Необходимо общежитие: <Field type=\"checkbox\" name=\"needsHousing\" />\n                        </label>\n                    </div>\n                    <div>\n                        <button type=\"submit\">+</button>\n                        <button type=\"button\" onClick={() => onAddRandom()}>\n                            *\n                        </button>\n                    </div>\n                </div>\n            </Form>\n        </Formik>\n    )\n}\n\nexport default observer(ApplicantInput)\n","import Applicant from './Applicant'\nimport styles from './Applicant.module.css'\n\ntype Props = {\n    applicant: Applicant\n    onRemove: () => void\n}\n\nconst ApplicantView = ({ applicant, onRemove }: Props): JSX.Element => (\n    <div className={styles.applicant}>\n        <div>\n            <span>Фамилия: {applicant.lastName}</span>\n            <span>Оценки: {applicant.grades.join(', ')}</span>\n            <span>Место жительства: {applicant.city}</span>\n        </div>\n        <div>\n            <span>Аттестат с отличием: {applicant.hasCertificate ? 'Есть' : 'Нет'}</span>\n            <span>Необходимо общежитие: {applicant.needsHousing ? 'Да' : 'Нет'}</span>\n        </div>\n        <div>\n            <button onClick={() => onRemove()}>x</button>\n        </div>\n    </div>\n)\n\nexport default ApplicantView\n","import Applicant from './Applicant'\nimport { INode, ISublist } from 'MultiLinkedList'\nimport ApplicantView from './ApplicantView'\nimport { observer } from 'mobx-react'\nimport Keyed from 'Keyed'\n\ntype Props = {\n    list: ISublist<Keyed<Applicant>>\n    onRemove: (node: INode<Keyed<Applicant>>) => void\n}\n\nconst ApplicantList = ({ list, onRemove }: Props): JSX.Element => (\n    <div>\n        {list.mapNodes(node => (\n            <ApplicantView\n                key={node.item.key}\n                applicant={node.item}\n                onRemove={() => onRemove(node)}\n            />\n        ))}\n    </div>\n)\nexport default observer(ApplicantList)\n","import { createAtom, IAtom } from 'mobx'\n\ntype Predicate<T> = (item: T) => boolean\n\ninterface INode<T> {\n    readonly item: T\n    nextOf(sublist: ISublist<T>): INode<T> | undefined\n    prevOf(sublist: ISublist<T>): INode<T> | undefined\n}\n\ninterface ISublist<T> {\n    first(): INode<T> | undefined\n    last(): INode<T> | undefined\n    nodes(): INode<T>[]\n    map<TResult>(func: (item: T) => TResult): TResult[]\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[]\n}\n\nclass Node<T> implements INode<T> {\n    readonly prevPointers = new Map<ISublist<T>, Node<T> | undefined>()\n    readonly nextPointers = new Map<ISublist<T>, Node<T> | undefined>()\n\n    constructor(readonly item: T) {}\n\n    nextOf(sublist: ISublist<T>): Node<T> | undefined {\n        return this.nextPointers.get(sublist)\n    }\n    prevOf(sublist: ISublist<T>): Node<T> | undefined {\n        return this.prevPointers.get(sublist)\n    }\n}\n\nclass Sublist<T> implements ISublist<T> {\n    private firstNode?: Node<T>\n    private lastNode?: Node<T>\n\n    constructor(readonly predicate: Predicate<T>) {}\n    first(): Node<T> | undefined {\n        return this.firstNode\n    }\n\n    last(): Node<T> | undefined {\n        return this.lastNode\n    }\n\n    add(newNode: Node<T>): void {\n        if (!this.firstNode) {\n            this.firstNode = newNode\n            this.lastNode = newNode\n        } else if (this.lastNode) {\n            this.lastNode.nextPointers.set(this, newNode)\n            newNode.prevPointers.set(this, this.lastNode)\n            this.lastNode = newNode\n        }\n    }\n\n    remove(removedNode: Node<T>): void {\n        const next = removedNode.nextPointers.get(this)\n        const prev = removedNode.prevPointers.get(this)\n\n        if (this.firstNode === removedNode) {\n            this.firstNode = next\n        }\n        if (this.lastNode === removedNode) {\n            this.lastNode = prev\n        }\n\n        if (prev) {\n            prev.nextPointers.set(this, next)\n        }\n\n        if (next) {\n            next.prevPointers.set(this, prev)\n        }\n    }\n\n    forEachMutNode(func: (node: Node<T>) => void): void {\n        let currentNode = this.firstNode\n        while (currentNode) {\n            func(currentNode)\n            currentNode = currentNode.nextPointers.get(this)\n        }\n    }\n\n    forEachNode(func: (node: INode<T>) => void): void {\n        this.forEachMutNode(func)\n    }\n\n    map<TResult>(func: (item: T) => TResult): TResult[] {\n        const arr: TResult[] = []\n        this.forEachNode(n => arr.push(func(n.item)))\n        return arr\n    }\n\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[] {\n        const arr: TResult[] = []\n        this.forEachNode(n => arr.push(func(n)))\n        return arr\n    }\n\n    nodes(): INode<T>[] {\n        const arr: INode<T>[] = []\n        this.forEachNode(n => arr.push(n))\n        return arr\n    }\n\n    content(): T[] {\n        const arr: T[] = []\n        this.forEachNode(n => arr.push(n.item))\n        return arr\n    }\n\n    clear(): void {\n        this.firstNode = undefined\n        this.lastNode = undefined\n    }\n}\n\nclass ObservableSublist<T> extends Sublist<T> {\n    private readonly atom: IAtom\n\n    constructor(predicate: Predicate<T>) {\n        super(predicate)\n        this.atom = createAtom('ObservableSublist')\n    }\n\n    first(): Node<T> | undefined {\n        this.atom.reportObserved()\n        return super.first()\n    }\n\n    last(): Node<T> | undefined {\n        this.atom.reportObserved()\n        return super.last()\n    }\n\n    add(newNode: Node<T>): void {\n        this.atom.reportChanged()\n        super.add(newNode)\n    }\n\n    remove(removedNode: Node<T>): void {\n        this.atom.reportChanged()\n        super.remove(removedNode)\n    }\n\n    forEachMutNode(func: (node: Node<T>) => void): void {\n        this.atom.reportObserved()\n        super.forEachMutNode(func)\n    }\n\n    forEachNode(func: (node: INode<T>) => void): void {\n        this.atom.reportObserved()\n        super.forEachNode(func)\n    }\n\n    map<TResult>(func: (item: T) => TResult): TResult[] {\n        this.atom.reportObserved()\n        return super.map(func)\n    }\n\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[] {\n        this.atom.reportObserved()\n        return super.mapNodes(func)\n    }\n\n    nodes(): INode<T>[] {\n        this.atom.reportObserved()\n        return super.nodes()\n    }\n\n    content(): T[] {\n        this.atom.reportObserved()\n        return super.content()\n    }\n}\n\n// todo: atoms !!!!\nclass MultiLinkedList<T> {\n    protected mainList: Sublist<T>\n    protected sublists: Sublist<T>[] = []\n\n    constructor() {\n        this.mainList = new Sublist(() => true)\n    }\n\n    getMainList(): ISublist<T> {\n        return this.mainList as ISublist<T>\n    }\n\n    createSublist(predicate: Predicate<T>): ISublist<T> {\n        const sublist = new Sublist(predicate)\n        this.populateSublist(sublist)\n        this.sublists.push(sublist)\n\n        return sublist\n    }\n\n    protected populateSublist(sublist: Sublist<T>): void {\n        this.mainList.forEachMutNode(node => {\n            if (sublist.predicate(node.item)) sublist.add(node)\n        })\n    }\n\n    add(item: T): void {\n        const node = new Node(item)\n        this.mainList.add(node)\n        this.sublists.forEach(s => {\n            if (s.predicate(item)) s.add(node)\n        })\n    }\n\n    remove(node: INode<T>): void {\n        const mNode = node as Node<T>\n        this.mainList.remove(mNode)\n        this.sublists.forEach(s => s.remove(mNode))\n    }\n\n    clear(): void {\n        this.mainList.clear()\n        this.sublists.forEach(l => l.clear())\n    }\n}\n\nclass ObservableMultiLinkedList<T> extends MultiLinkedList<T> {\n    constructor() {\n        super()\n        this.mainList = new ObservableSublist(() => true)\n    }\n\n    createSublist(predicate: Predicate<T>): ISublist<T> {\n        const sublist = new ObservableSublist<T>(predicate)\n        this.populateSublist(sublist)\n        this.sublists.push(sublist)\n        return sublist\n    }\n}\n\nexport { MultiLinkedList, ObservableMultiLinkedList }\nexport type { ISublist, INode }\n","import { INode, ISublist, ObservableMultiLinkedList } from 'MultiLinkedList'\nimport Applicant, { ExamGrade } from './Applicant'\nimport { action, makeObservable, observable } from 'mobx'\nimport { Chance } from 'chance'\nimport { v4 as uuid } from 'uuid'\nimport Keyed from 'Keyed'\n\nexport default class ApplicantStore {\n    private readonly list: ObservableMultiLinkedList<Keyed<Applicant>>\n    readonly allApplicants: ISublist<Keyed<Applicant>>\n    readonly allExamsExcelent: ISublist<Keyed<Applicant>>\n    readonly hasCertificate: ISublist<Keyed<Applicant>>\n    readonly outsideOryol: ISublist<Keyed<Applicant>>\n    readonly needsHousing: ISublist<Keyed<Applicant>>\n\n    constructor() {\n        this.list = new ObservableMultiLinkedList()\n        this.allApplicants = this.list.getMainList()\n        this.allExamsExcelent = this.list.createSublist(a => a.grades.every(g => g === 5))\n\n        this.hasCertificate = this.list.createSublist(a => a.hasCertificate)\n        this.outsideOryol = this.list.createSublist(a => a.city.toLowerCase() !== 'орёл')\n        this.needsHousing = this.list.createSublist(a => a.needsHousing)\n        makeObservable(this)\n    }\n\n    @action add(applicant: Applicant): void {\n        this.list.add(observable({ key: uuid(), ...applicant }))\n    }\n\n    @action addRandom(): void {\n        const chance = new Chance()\n        const getGrade = (): ExamGrade => chance.pickone([2, 3, 4, 5])\n\n        const applicant: Keyed<Applicant> = {\n            lastName: chance.last(),\n            grades: [getGrade(), getGrade(), getGrade()],\n            hasCertificate: chance.bool(),\n            city: chance.city(),\n            needsHousing: chance.bool(),\n            key: uuid(),\n        }\n\n        this.add(applicant)\n    }\n\n    @action clear(): void {\n        this.list.clear()\n    }\n\n    @action remove(node: INode<Keyed<Applicant>>): void {\n        this.list.remove(node)\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}