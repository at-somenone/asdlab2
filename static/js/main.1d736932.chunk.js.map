{"version":3,"sources":["Applicant/Applicant.ts","App.tsx","Applicant/ApplicantInput.tsx","Applicant/ApplicantView.tsx","Applicant/ApplicantList.tsx","MultiLinkedList.ts","Applicant/ApplicantStore.ts","index.tsx","Applicant/Applicant.module.css"],"names":["ExamGrade","ShowMode","observer","onAdd","onAddRandom","defaultApplicant","lastName","grades","Excellent","hasCertificate","city","needsHousing","state","useLocalObservable","applicant","className","classNames","styles","editingApplicant","left","type","value","onChange","action","e","target","map","k","Good","Pass","Fail","Number","middle","checked","right","onClick","runInAction","makeApplicant","ApplicantView","onRemove","v","Error","join","list","mapNodes","node","item","Node","prevPointers","Map","nextPointers","sublist","this","get","Sublist","predicate","firstNode","lastNode","newNode","set","removedNode","next","prev","func","currentNode","forEachMutNode","arr","forEachNode","n","push","ObservableSublist","atom","createAtom","reportObserved","reportChanged","ObservableMultiLinkedList","mainList","populateSublist","sublists","add","forEach","s","mNode","remove","nodes","ApplicantStore","allApplicants","allExamsExcelent","outsideOryol","getMainList","createSublist","a","every","g","toLowerCase","makeObservable","observable","key","uuid","console","log","chance","Chance","getGrade","pickone","last","bool","clear","store","mode","All","id","htmlFor","AllExamsExcellent","HasCertificate","OutsideOryol","NeedsHousing","addRandom","getList","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1d736932.chunk.js","sourcesContent":["// фамилия;\n// оценки по трем вступительным экзаменам;\n// сведения о наличии аттестата с отличием;\n// наименование населенного пункта, в котором проживает абитуриент;\n// сведения о необходимости предоставления общежития.\n\nexport enum ExamGrade {\n    Fail,\n    Pass,\n    Good,\n    Excellent,\n}\n\ntype Applicant = {\n    readonly lastName: string\n    readonly grades: [ExamGrade, ExamGrade, ExamGrade]\n    readonly hasCertificate: boolean\n    readonly city: string\n    readonly needsHousing: boolean\n}\n\nexport default Applicant\n","import { action } from 'mobx'\nimport { observer, useLocalObservable } from 'mobx-react'\nimport ApplicantInput from './Applicant/ApplicantInput'\nimport ApplicantList from './Applicant/ApplicantList'\nimport ApplicantStore from './Applicant/ApplicantStore'\n\nenum ShowMode {\n    All,\n    AllExamsExcellent,\n    HasCertificate,\n    OutsideOryol,\n    NeedsHousing,\n}\n\nfunction App() {\n    const state = useLocalObservable(() => ({\n        store: new ApplicantStore(),\n        mode: ShowMode.All,\n    }))\n\n    const getList = () => {\n        switch (state.mode) {\n            case ShowMode.All:\n                return state.store.allApplicants\n            case ShowMode.AllExamsExcellent:\n                return state.store.allExamsExcelent\n            case ShowMode.HasCertificate:\n                return state.store.hasCertificate\n            case ShowMode.OutsideOryol:\n                return state.store.outsideOryol\n            case ShowMode.NeedsHousing:\n                return state.store.needsHousing\n        }\n    }\n\n    return (\n        <div>\n            <button onClick={action(() => state.store.clear())}>Удалить все</button>\n            <br/>\n            <input\n                id=\"showAll\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.All}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.All\n                })}\n            />\n            <label htmlFor=\"showAll\">Все</label>\n            <br />\n            <input\n                id=\"showAllExamsExcellent\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.AllExamsExcellent}\n                onChange={action(e => {\n                    if (e.target.checked)\n                        state.mode = ShowMode.AllExamsExcellent\n                })}\n            />\n            <label htmlFor=\"showAllExamsExcellent\">\n                Все экзамены на отлично\n            </label>\n            <br />\n            <input\n                id=\"showHasCertificate\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.HasCertificate}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.HasCertificate\n                })}\n            />\n            <label htmlFor=\"showHasCertificate\">\n                Есть аттестат с отличием\n            </label>\n            <br />\n            <input\n                id=\"showOutsideOryol\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.OutsideOryol}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.OutsideOryol\n                })}\n            />\n            <label htmlFor=\"showOutsideOryol\">Вне Орла</label>\n            <br />\n            <input\n                id=\"showNeedsHousing\"\n                type=\"radio\"\n                checked={state.mode === ShowMode.NeedsHousing}\n                onChange={action(e => {\n                    if (e.target.checked) state.mode = ShowMode.NeedsHousing\n                })}\n            />\n            <label htmlFor=\"showNeedsHousing\">Требуется общежитие</label>\n            <br />\n\n            <ApplicantInput onAdd={a => state.store.add(a)} onAddRandom={action(() => state.store.addRandom())} />\n            <ApplicantList onRemove={action(node => state.store.remove(node))} list={getList()} />\n        </div>\n    )\n}\n\nexport default observer(App)\n","import { action, runInAction } from 'mobx'\nimport { observer, useLocalObservable } from 'mobx-react-lite'\nimport Applicant, { ExamGrade } from './Applicant'\nimport styles from './Applicant.module.css'\nimport classNames from 'classnames'\ntype Props = {\n    onAdd: (a: Applicant) => void\n    onAddRandom: () => void\n}\n\nconst ApplicantInput = ({ onAdd, onAddRandom }: Props) => {\n    const defaultApplicant = () => ({\n        lastName: '',\n        grades: [\n            ExamGrade.Excellent,\n            ExamGrade.Excellent,\n            ExamGrade.Excellent,\n        ] as [ExamGrade, ExamGrade, ExamGrade],\n        hasCertificate: false,\n        city: '',\n        needsHousing: false,\n    })\n    let state = useLocalObservable(() => ({ applicant: defaultApplicant() }))\n\n    const makeApplicant = () => {\n        const applicant: Applicant = state.applicant\n        runInAction(() => (state.applicant = defaultApplicant()))\n        return applicant\n    }\n\n    return (\n        <div className={classNames(styles.applicant, styles.editingApplicant)}>\n            <div className={styles.left}>\n                <span>Фамилия:</span>\n                <input\n                    type=\"text\"\n                    value={state.applicant.lastName}\n                    onChange={action(\n                        e => (state.applicant.lastName = e.target.value)\n                    )}\n                />\n                <br />\n                <span>Оценки:</span>{' '}\n                {[0, 1, 2].map(k => (\n                    <select\n                        onChange={action(e => {\n                            state.applicant.grades[k] = [\n                                ExamGrade.Excellent,\n                                ExamGrade.Good,\n                                ExamGrade.Pass,\n                                ExamGrade.Fail,\n                            ][Number(e.target.value)]\n                        })}\n                    >\n                        <option value={0}>Отлично</option>\n                        <option value={1}>Хорошо</option>\n                        <option value={2}>Удовл.</option>\n                        <option value={3}>Неуд.</option>\n                    </select>\n                ))}\n                <br />\n                <span>Место жительства: </span>\n                <input\n                    type=\"text\"\n                    value={state.applicant.city}\n                    onChange={action(\n                        e => (state.applicant.city = e.target.value)\n                    )}\n                />\n                <br />\n            </div>\n            <div className={styles.middle}>\n                <span>Аттестат с отличием:</span>\n                <input\n                    type=\"checkbox\"\n                    checked={state.applicant.hasCertificate}\n                    onChange={action(\n                        e => (state.applicant.hasCertificate = e.target.checked)\n                    )}\n                />\n                <br />\n                <span>Необходимо общежитие:</span>\n                <input\n                    type=\"checkbox\"\n                    checked={state.applicant.needsHousing}\n                    onChange={action(\n                        e => (state.applicant.needsHousing = e.target.checked)\n                    )}\n                />\n            </div>\n            <div className={styles.right}>\n                <button onClick={() => onAdd(makeApplicant())}>+</button>\n                <br />\n                <button onClick={() => onAddRandom()}>*</button>\n            </div>\n        </div>\n    )\n}\n\nexport default observer(ApplicantInput)\n","import Applicant, { ExamGrade } from './Applicant'\nimport styles from './Applicant.module.css'\n\ntype Props = {\n    applicant: Applicant\n    onRemove: () => void\n}\n\nconst ApplicantView = ({ applicant,onRemove }: Props) => (\n    <div className={styles.applicant}>\n        <div className={styles.left}>\n            <span>Фамилия: {applicant.lastName}</span>\n            <br />\n            <span>\n                Оценки:{' '}\n                {applicant.grades\n                    .map(v => {\n                        switch (v) {\n                            case ExamGrade.Fail:\n                                return 'Неуд.'\n                            case ExamGrade.Pass:\n                                return 'Удовл.'\n                            case ExamGrade.Good:\n                                return 'Хорошо'\n                            case ExamGrade.Excellent:\n                                return 'Отлично'\n                            default:\n                                throw new Error('what')\n                        }\n                    })\n                    .join(', ')}\n            </span>\n            <br />\n            <span>Место жительства: {applicant.city}</span>\n            <br />\n        </div>\n        <div className={styles.middle}>\n            <span>\n                Аттестат с отличием: {applicant.hasCertificate ? 'Есть' : 'Нет'}\n            </span>\n            <br />\n            <span>\n                Необходимо общежитие:{' '}\n                {applicant.needsHousing ? 'Да' : 'Нет'}\n            </span>\n        </div>\n        <div className={styles.right}>\n            <button onClick={() => onRemove()}>x</button>\n        </div>\n    </div>\n)\n\nexport default ApplicantView","import Applicant from './Applicant'\nimport { INode, ISublist } from '../MultiLinkedList'\nimport ApplicantView from './ApplicantView'\nimport { observer } from 'mobx-react'\nimport Keyed from '../Keyed'\n\ntype Props = {\n    list: ISublist<Keyed<Applicant>>\n    onRemove: (node: INode<Keyed<Applicant>>) => void\n}\n\nconst ApplicantList = ({ list, onRemove }: Props) => (\n    <div>\n        {list.mapNodes(node => (\n            <ApplicantView\n                applicant={node.item}\n                onRemove={() => onRemove(node)}\n            />\n        ))}\n    </div>\n)\nexport default observer(ApplicantList)\n","import { createAtom, IAtom } from \"mobx\"\n\ntype Predicate<T> = (item: T) => boolean\n\ninterface INode<T> {\n    readonly item: T\n    nextOf(sublist: ISublist<T>): INode<T> | undefined\n    prevOf(sublist: ISublist<T>): INode<T> | undefined\n}\n\ninterface ISublist<T> {\n    first(): INode<T> | undefined\n    last(): INode<T> | undefined\n    nodes(): INode<T>[]\n    map<TResult>(func: (item: T) => TResult): TResult[]\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[]\n\n}\n\nclass Node<T> implements INode<T> {\n    readonly prevPointers = new Map<ISublist<T>, Node<T> | undefined>()\n    readonly nextPointers = new Map<ISublist<T>, Node<T> | undefined>()\n\n    constructor(readonly item: T) {}\n\n    nextOf(sublist: ISublist<T>) {\n        return this.nextPointers.get(sublist)\n    }\n    prevOf(sublist: ISublist<T>) {\n        return this.prevPointers.get(sublist)\n    }\n}\n\nclass Sublist<T> implements ISublist<T> {\n    private firstNode?: Node<T>\n    private lastNode?: Node<T>\n\n    constructor(readonly predicate: Predicate<T>) {}\n    first() {\n        return this.firstNode\n    }\n\n    last() {\n        return this.lastNode\n    }\n\n    add(newNode: Node<T>) {\n        if (!this.firstNode) {\n            this.firstNode = newNode\n            this.lastNode = newNode\n        } else if (this.firstNode === this.lastNode) {\n            this.firstNode.nextPointers.set(this, newNode)\n            newNode.prevPointers.set(this, this.firstNode)\n            this.lastNode = newNode\n        } else if (this.lastNode) {\n            this.lastNode.nextPointers.set(this, newNode)\n            newNode.prevPointers.set(this, this.lastNode)\n            this.lastNode = newNode\n        }\n    }\n\n    remove(removedNode: Node<T>) {\n        const next = removedNode.nextPointers.get(this)\n        const prev = removedNode.prevPointers.get(this)\n\n        if (this.firstNode === removedNode) {\n            this.firstNode = next\n        }\n        if (this.lastNode === removedNode) {\n            this.lastNode = prev\n        }\n\n        if (prev) {\n            prev.nextPointers.set(this, next)\n        }\n\n        if (next) {\n            next.prevPointers.set(this, prev)\n        }\n    }\n\n    forEachMutNode(func: (node: Node<T>) => void) {\n        let currentNode = this.firstNode\n        while (currentNode) {\n            func(currentNode)\n            currentNode = currentNode.nextPointers.get(this)\n        }\n    }\n\n    forEachNode(func: (node: INode<T>) => void) {\n        this.forEachMutNode(func)\n    }\n\n    map<TResult>(func: (item: T) => TResult): TResult[] {\n        const arr: TResult[] = []\n        this.forEachNode(n => arr.push(func(n.item)))\n        return arr\n    }\n\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[] {\n        const arr: TResult[] = []\n        this.forEachNode(n => arr.push(func(n)))\n        return arr\n    }\n\n    nodes() {\n        const arr: INode<T>[] = []\n        this.forEachNode(n => arr.push(n))\n        return arr\n    }\n\n    content() {\n        const arr: T[] = []\n        this.forEachNode(n => arr.push(n.item))\n        return arr\n    }\n}\n\nclass ObservableSublist<T> extends Sublist<T> {\n    private readonly atom: IAtom\n\n    constructor(predicate: Predicate<T>) {\n        super(predicate)\n        this.atom = createAtom('ObservableSublist')\n    }\n\n    first() {\n        this.atom.reportObserved()\n        return super.first()\n    }\n\n    last() {\n        this.atom.reportObserved()\n        return super.last()\n    }\n\n    add(newNode: Node<T>) {\n        this.atom.reportChanged()\n        super.add(newNode)\n    }\n\n    remove(removedNode: Node<T>) {\n        this.atom.reportChanged()\n        super.remove(removedNode)\n    }\n\n    forEachMutNode(func: (node: Node<T>) => void) {\n        this.atom.reportObserved()\n        super.forEachMutNode(func)\n    }\n\n    forEachNode(func: (node: INode<T>) => void) {\n        this.atom.reportObserved()\n        super.forEachNode(func)\n    }\n\n    map<TResult>(func: (item: T) => TResult): TResult[] {\n        this.atom.reportObserved()\n        return super.map(func)\n    }\n\n    mapNodes<TResult>(func: (node: INode<T>) => TResult): TResult[] {\n        this.atom.reportObserved()\n        return super.mapNodes(func)\n    }\n\n    nodes() {\n        this.atom.reportObserved()\n        return super.nodes()\n    }\n\n    content() {\n        this.atom.reportObserved()\n        return super.content()\n    }\n}\n\n// todo: atoms !!!!\nclass MultiLinkedList<T> {\n    protected mainList: Sublist<T>\n    protected sublists: Sublist<T>[] = []\n\n    constructor() {\n        this.mainList = new Sublist(() => true)\n    }\n\n    getMainList() {\n        return this.mainList as ISublist<T>\n    }\n\n    createSublist(predicate: Predicate<T>): ISublist<T> {\n        const sublist = new Sublist(predicate)\n        this.populateSublist(sublist)\n        this.sublists.push(sublist)\n\n        return sublist\n    }\n\n    protected populateSublist(sublist: Sublist<T>) {\n        this.mainList.forEachMutNode(node => {\n            if (sublist.predicate(node.item)) sublist.add(node)\n        })\n    }\n\n    add(item: T) {\n        const node = new Node(item)\n        this.mainList.add(node)\n        this.sublists.forEach(s => {\n            if (s.predicate(item)) s.add(node)\n        })\n    }\n\n    remove(node: INode<T>) {\n        const mNode = node as Node<T>\n        this.mainList.remove(mNode)\n        this.sublists.forEach(s => s.remove(mNode))\n    }\n\n    clear() {\n        this.mainList.nodes().forEach(node => this.remove(node))\n    }\n}\n\nclass ObservableMultiLinkedList<T> extends MultiLinkedList<T> {\n    constructor() {\n        super()\n        this.mainList = new ObservableSublist(() => true)\n    }\n\n    createSublist(predicate: Predicate<T>): ISublist<T> {\n        const sublist = new ObservableSublist<T>(predicate)\n        this.populateSublist(sublist)\n        this.sublists.push(sublist)\n        return sublist\n    }\n}\n\nexport { MultiLinkedList, ObservableMultiLinkedList }\nexport type { ISublist, INode }\n","import { INode, ISublist, ObservableMultiLinkedList } from '../MultiLinkedList'\nimport Applicant, { ExamGrade } from './Applicant'\nimport { action, makeObservable, observable } from 'mobx'\nimport { Chance } from 'chance'\nimport { v4 as uuid } from 'uuid'\nimport Keyed from '../Keyed'\n\n// все экзамены сданы на «отлично»;\n// имеется аттестат с отличием;\n// проживает за пределами населенного пункта, в котором расположен университет;\n// нуждается в общежитии;\nexport default class ApplicantStore {\n    private readonly list: ObservableMultiLinkedList<Keyed<Applicant>>\n    readonly allApplicants: ISublist<Keyed<Applicant>>\n    readonly allExamsExcelent: ISublist<Keyed<Applicant>>\n    readonly hasCertificate: ISublist<Keyed<Applicant>>\n    readonly outsideOryol: ISublist<Keyed<Applicant>>\n    readonly needsHousing: ISublist<Keyed<Applicant>>\n\n    constructor() {\n        this.list = new ObservableMultiLinkedList()\n        this.allApplicants = this.list.getMainList()\n        this.allExamsExcelent = this.list.createSublist(a =>\n            a.grades.every(g => g === ExamGrade.Excellent)\n        )\n\n        this.hasCertificate = this.list.createSublist(a => a.hasCertificate)\n        this.outsideOryol = this.list.createSublist(\n            a => a.city.toLowerCase() !== 'орёл'\n        )\n        this.needsHousing = this.list.createSublist(a => a.needsHousing)\n        makeObservable(this)\n    }\n\n    @action add(applicant: Applicant) {\n        this.list.add(observable({ key: uuid(), ...applicant }))\n    }\n\n    @action addRandom() {\n        console.log('hi')\n        const chance = new Chance()\n        const getGrade = () =>\n            chance.pickone([\n                ExamGrade.Fail,\n                ExamGrade.Pass,\n                ExamGrade.Good,\n                ExamGrade.Excellent,\n            ])\n        \n        const applicant: Keyed<Applicant> = {\n            lastName: chance.last(),\n            grades: [getGrade(), getGrade(), getGrade()],\n            hasCertificate: chance.bool(),\n            city: chance.city(),\n            needsHousing: chance.bool(),\n            key: uuid()\n        }\n\n        this.add(applicant)\n    }\n\n    @action clear() {\n        this.list.clear()\n    }\n\n    @action remove(node: INode<Keyed<Applicant>>) {\n        this.list.remove(node)\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"applicant\":\"Applicant_applicant__kjt9b\",\"editingApplicant\":\"Applicant_editingApplicant__12iqU\",\"left\":\"Applicant_left__3VxZJ\",\"middle\":\"Applicant_middle__2RjE7\",\"right\":\"Applicant_right__FNGZO\"};"],"sourceRoot":""}